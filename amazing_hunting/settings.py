"""
Django settings for amazing_hunting project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*n=u*%-78(0+zv8^hc18dd%s2lc6oza(2a@191$tmxew39o$30'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [  # имена всех приложений в нашем джанго проекте
    'django.contrib.admin',  # админ панель
    'django.contrib.auth',  # система авторизации и аутентификации в джанго
    'django.contrib.contenttypes',  # движёк для работы с нашими моделями, позволит работать с базой данных
    'django.contrib.sessions',  # для работы с пользователями, та же самая авторизация и аутентификация
    'django.contrib.messages',
    # пакет всплывающих сообщений, например когда что то сохранил и появляется окошко о с информацией о том что сохранили
    'django.contrib.staticfiles',  # работа со статикой, например js, css, всякие картинки
    'rest_framework',  # нужно написать обязательно до 'vacancies', 'companies'
    'rest_framework.authtoken',
     # 1 шаг - эта библиотека встроена в rest_framework, ничего дополнительного устанавливать не надо,
     # надо только подключить. Она позволяет делать аутентификацию по токену. Создаёт токен.
     # 2 шаг - у этой библиотеке есть миграции. Надо запустить python manage.py migrate, после этой команды создаётся таблицы
     # в которых authtoken будет хранить токены, по которым приходят к нам от пользователи.
     # Эти таблички создадутся наверное - admin, auth, authentication, authtoken, companies, contenttypes, sessions, vacancies
     # 3 шаг - подключаем путь для логина тут C:\amazing_hunting\authentication\urls.py
    'vacancies',
    'companies',
    'authentication',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'amazing_hunting.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'amazing_hunting.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

'''нужны две константы. 
   MEDIA_URL путь относительно нашего сайта по которому будем отдавать наши картинки,
   обычно называют media
   MEDIA_ROOT то, где все наши картинки, таблички, документы и вообще все медиа файлы, 
   всё что загружает пользователь на наш сайт'''

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
'''BASE_DIR это папка в которой лежит весь наш поект
   второй аргумент 'media' это папка в которую будем класть медиа
   os.path.join соединяет пути для моей операционной системы
   и разделители папок поставит нужные
   у МАС / у виндовс \\'''
TOTAL_ON_PAGE = 10

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ]
    # 4 шаг - в константе DEFAULT_AUTHENTICATION_CLASSES показываем как аутоинтифицировать наших пользователей.
    # Через какие классы проверять аутентификацию пользоватей.
    # будем аутентифицировать пользователей по токену
}

AUTH_USER_MODEL = 'authentication.User' # где лежит пользователь джанго. APP и название модели